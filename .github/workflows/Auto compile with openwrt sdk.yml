#
# Copyright (c) 2022-2023 SMALLPROGRAM <https://github.com/smallprogram>
# Description: Auto compile
#
name: "Auto compile with openwrt sdk"
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  # schedule:
  #   - cron: "0 */4 * * *"
env:
  TZ: Asia/Jakarta


jobs:
  job_auto_compile:
    runs-on: ubuntu-latest
    name: build (${{ matrix.platform }}) 
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: x86_generic
            url_sdk: https://downloads.openwrt.org/snapshots/targets/x86/generic/openwrt-sdk-x86-generic_gcc-12.2.0_musl.Linux-x86_64.tar.xz
                   
          # - platform: 
          #   url_sdk: 
              
          # - platform: 
          #   url_sdk: 
              
          # - platform: 
          #   url_sdk: 
              
          # - platform: 
          #   url_sdk: 
              
          # - platform: 
          #   url_sdk: 
              
          # - platform: 
          #   url_sdk: 
              
          # - platform: 
          #   url_sdk: 
              
          # - platform: 
          #   url_sdk: 
              
          # - platform: 
          #   url_sdk: 
              
          # - platform: 
          #   url_sdk: 
              
          # - platform: 
          #   url_sdk: 
              
          # - platform: 
          #   url_sdk: 
              
          # - platform: 
          #   url_sdk: 
              
          # - platform: 
          #   url_sdk: 
              
          # - platform: 
          #   url_sdk: 


            


    steps:
      - name: Initialization ${{ matrix.platform }} compile environment
        run: |
          echo "install packages!!!!!!"
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL https://github.com/smallprogram/OpenWrtAction/raw/main/diy_script/official_dependence)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          ref: 'luci'

      - name: ${{ matrix.platform }} sdk download
        run: |
          wget ${{ matrix.url_sdk }}
          file_name=$(echo ${{matrix.url_sdk}} | awk -F/ '{print $NF}')
          mkdir sdk && tar -xJf $file_name -C ./sdk --strip-components=1
          cd sdk

      - name: SSH connection to Actions
        uses: mxschmitt/action-tmate@v3.13
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

      - name: ${{ matrix.platform }} feeds configuration
        run: |
          cd sdk

          echo "src-git passwall_packages https://github.com/xiaorouji/openwrt-passwall.git;packages" >> feeds.conf.default
          echo "src-git passwall_luci https://github.com/xiaorouji/openwrt-passwall.git;luci" >> feeds.conf.default

          ./scripts/feeds update -a
          ./scripts/feeds install -a -f -p passwall_packages
          ./scripts/feeds install luci-app-passwall

          echo "CONFIG_PACKAGE_luci-app-passwall=m" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_Iptables_Transparent_Proxy=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_Nftables_Transparent_Proxy=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Brook=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ChinaDNS_NG=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Haproxy=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Hysteria=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_NaiveProxy=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Client=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Server=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Client=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Server=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Libev_Client=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Libev_Server=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Simple_Obfs=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_GO=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_Plus=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray_Geodata=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray_Plugin=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray=y" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray_Plugin=y" >> .config

          make defconfig


      - name: ${{ matrix.platform }} download
        run: |
          cd sdk
          make download -j8
          find dl -size -1024c -exec ls -l {} \;     
      
      - name: ${{ matrix.platform }} compile
        id: compile
        run: |
          cd sdk
          make package/luci-app-passwall/{clean,compile} -j$(($(nproc)))

          echo "status=success" >> $GITHUB_OUTPUT

      - name: Organize ${{ matrix.platform }} files
        id: organize
        if: steps.compile.outputs.status == 'success'
        run: |
          cd sdk
          zip -r passwall_ipk_${{ matrix.platform }}.zip bin/packages/
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Generate release tag
        id: tag
        if: steps.compile.outputs.status == 'success'
        run: |
          cd sdk
          echo "## :mega:Update content" >> release.txt
          

          psw_version=$(sed -n '9,10p' feeds/passwall_luci/luci-app-passwall/Makefile | awk -F':=' '{ORS="-"}{print $2}' | sed 's/-$/\n/')
          echo "PASSWALL_VERSION=$psw_version" >> $GITHUB_ENV

          cd feeds/passwall_luci
          git_head=$(git rev-parse --short HEAD)
          echo "GIT_HEAD=$git_head" >> $GITHUB_ENV
          cd ..
          cd ..

          echo "![](https://img.shields.io/github/downloads/xiaorouji/openwrt-passwall/${psw_version}_${git_head}/total?style=flat-square)" >> release.txt
          echo "### Passwall Version" >> release.txt

          echo "**:minidisc: Passwall Version: $psw_version**" >> release.txt
          
          echo "### Packages Version" >> release.txt
          
          echo "**package name**|**package version**" >> release.txt
          echo "-|-" >> release.txt
          echo "**:ice_cube: brook:**|**$(sed -n '8p' feeds/passwall_packages/brook/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: chinadns-ng:**|**$(sed -n '8p' feeds/passwall_packages/chinadns-ng/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: dns2socks:**|**$(sed -n '8p' feeds/passwall_packages/dns2socks/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: dns2tcp:**|**$(sed -n '8p' feeds/passwall_packages/dns2tcp/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: gn:**|**$(sed -n '12p' feeds/passwall_packages/gn/Makefile | awk -F':=' '{print $2}' | tr -d '[:space:]')**" >> release.txt
          echo "**:ice_cube: hysteria:**|**$(sed -n '8p' feeds/passwall_packages/hysteria/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: ipt2socks:**|**$(sed -n '8p' feeds/passwall_packages/ipt2socks/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: microsocks:**|**$(sed -n '8p' feeds/passwall_packages/microsocks/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: naiveproxy:**|**$(sed -n '8p' feeds/passwall_packages/naiveproxy/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: pdnsd-alt:**|**$(sed -n '8p' feeds/passwall_packages/pdnsd-alt/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: shadowsocks-rust:**|**$(sed -n '9p' feeds/passwall_packages/shadowsocks-rust/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: shadowsocksr-libev:**|**$(sed -n '10p' feeds/passwall_packages/shadowsocksr-libev/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: simple-obfs:**|**$(sed -n '11p' feeds/passwall_packages/simple-obfs/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: sing-box:**|**$(sed -n '9p' feeds/passwall_packages/sing-box/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: ssocks:**|**$(sed -n '14p' feeds/passwall_packages/ssocks/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: tcping:**|**$(sed -n '12p' feeds/passwall_packages/tcping/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: trojan-go:**|**$(sed -n '8p' feeds/passwall_packages/trojan-go/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: trojan-plus:**|**$(sed -n '10p' feeds/passwall_packages/trojan-plus/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: trojan:**|**$(sed -n '10p' feeds/passwall_packages/trojan/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: v2ray-core:**|**$(sed -n '8p' feeds/passwall_packages/v2ray-core/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: v2ray-geoip:**|**$(sed -n '15p' feeds/passwall_packages/v2ray-geodata/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: v2ray-geosite:**|**$(sed -n '24p' feeds/passwall_packages/v2ray-geodata/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: v2ray-plugin:**|**$(sed -n '9p' feeds/passwall_packages/v2ray-plugin/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: xray-core:**|**$(sed -n '4p' feeds/passwall_packages/xray-core/Makefile | cut -d'=' -f2)**" >> release.txt
          echo "**:ice_cube: xray-plugin:**|**$(sed -n '8p' feeds/passwall_packages/xray-plugin/Makefile | cut -d'=' -f2)**" >> release.txt
            
          touch release.txt

          
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.PASSWALL_VERSION }}_${{ env.GIT_HEAD }}
          body_path: ${{ env.FIRMWARE }}/release.txt
          files: ${{ env.FIRMWARE }}/passwall_ipk_${{ matrix.platform }}.zip

